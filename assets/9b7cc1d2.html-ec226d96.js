import{_ as t,o as r,c as d,e}from"./app-5de3c553.js";const a={},n=e('<p><strong>路径</strong> 被定义为一条从树中任意节点出发，沿父节点-子节点连接，达到任意节点的序列。同一个节点在一条路径序列中 <strong>至多出现一次</strong>。该路径 <strong>至少包含一个</strong> 节点，且不一定经过根节点。</p><p><strong>路径和</strong> 是路径中各节点值的总和。</p><p>给你一个二叉树的根节点 <code>root</code> ，返回其 最大路径和。</p><p><strong>示例 1：</strong><br><img src="https://s2.loli.net/2022/07/20/aGU7tSMkmE2Nxuz.jpg" alt="示例 1"><br><strong>输入</strong>：root = [1,2,3]<br><strong>输出</strong>：6<br><strong>解释</strong>：最优路径是 2 -&gt; 1 -&gt; 3 ，路径和为 2 + 1 + 3 = 6</p><p><strong>示例 2：</strong><br><img src="https://s2.loli.net/2022/07/20/etpZsRqXaWOckdL.jpg" alt="示例 2"><br><strong>输入</strong>：root = [-10,9,20,null,null,15,7]<br><strong>输出</strong>：42<br><strong>解释</strong>：最优路径是 15 -&gt; 20 -&gt; 7 ，路径和为 15 + 20 + 7 = 42</p><p><strong>提示：</strong></p><ul><li>树中节点数目范围是 <code>[1, 3 * 10⁴]</code></li><li><code>-1000 &lt;= Node.val &lt;= 1000</code></li></ul><p>Related Topics</p><ul><li>树</li><li>深度优先搜索</li><li>动态规划</li><li>二叉树</li><li>👍 1658</li><li>👎 0</li></ul><figure class="highlight java"><figcaption data-lang="java"></figcaption><div class="code-container"><table><tr><td data-num="1"></td><td><pre>/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * Definition for a binary tree node.</pre></td></tr><tr><td data-num="3"></td><td><pre> * public class TreeNode {</pre></td></tr><tr><td data-num="4"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num="5"></td><td><pre> *     TreeNode left;</pre></td></tr><tr><td data-num="6"></td><td><pre> *     TreeNode right;</pre></td></tr><tr><td data-num="7"></td><td><pre> *     TreeNode() {}</pre></td></tr><tr><td data-num="8"></td><td><pre> *     TreeNode(int val) { this.val = val; }</pre></td></tr><tr><td data-num="9"></td><td><pre> *     TreeNode(int val, TreeNode left, TreeNode right) {</pre></td></tr><tr><td data-num="10"></td><td><pre> *         this.val = val;</pre></td></tr><tr><td data-num="11"></td><td><pre> *         this.left = left;</pre></td></tr><tr><td data-num="12"></td><td><pre> *         this.right = right;</pre></td></tr><tr><td data-num="13"></td><td><pre> *     }</pre></td></tr><tr><td data-num="14"></td><td><pre> * }</pre></td></tr><tr><td data-num="15"></td><td><pre> */</pre></td></tr><tr><td data-num="16"></td><td><pre>class Solution {</pre></td></tr><tr><td data-num="17"></td><td><pre>  int res = Integer.MIN_VALUE;</pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>  public int maxPathSum(TreeNode root) {</pre></td></tr><tr><td data-num="20"></td><td><pre>    // 后序位置</pre></td></tr><tr><td data-num="21"></td><td><pre>    oneSideMax(root);</pre></td></tr><tr><td data-num="22"></td><td><pre>    return res;</pre></td></tr><tr><td data-num="23"></td><td><pre>  }</pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>  private int oneSideMax(TreeNode root){</pre></td></tr><tr><td data-num="26"></td><td><pre>    if (root == null) {</pre></td></tr><tr><td data-num="27"></td><td><pre>      return 0;</pre></td></tr><tr><td data-num="28"></td><td><pre>    }</pre></td></tr><tr><td data-num="29"></td><td><pre>    int left = Math.max(0, oneSideMax(root.left));</pre></td></tr><tr><td data-num="30"></td><td><pre>    int right = Math.max(0, oneSideMax(root.right));</pre></td></tr><tr><td data-num="31"></td><td><pre>    res = Math.max(res, left + right + root.val);</pre></td></tr><tr><td data-num="32"></td><td><pre>    return Math.max(left, right) + root.val;</pre></td></tr><tr><td data-num="33"></td><td><pre>  }</pre></td></tr><tr><td data-num="34"></td><td><pre>}</pre></td></tr><tr><td data-num="35"></td><td><pre>//leetcode submit region end(Prohibit modification and deletion)</pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr></table><div class="operation"><span class="breakline-btn"><i class="ic i-align-left"></i></span><span class="copy-btn"><i class="ic i-clipboard"></i></span><span class="fullscreen-btn"><i class="ic i-expand"></i></span></div></div></figure>',10),p=[n];function o(i,l){return r(),d("div",null,p)}const u=t(a,[["render",o],["__file","9b7cc1d2.html.vue"]]);export{u as default};
