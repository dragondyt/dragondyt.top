import{_ as t,o as d,c as r,e}from"./app-5de3c553.js";const a={},p=e('<figure class="highlight java"><figcaption data-lang="java"></figcaption><div class="code-container"><table><tr><td data-num="1"></td><td><pre>class Solution {</pre></td></tr><tr><td data-num="2"></td><td><pre>  public ListNode mergeKLists(ListNode[] lists) {</pre></td></tr><tr><td data-num="3"></td><td><pre>    if (lists.length == 0) return null;</pre></td></tr><tr><td data-num="4"></td><td><pre>    // 虚拟头结点</pre></td></tr><tr><td data-num="5"></td><td><pre>    ListNode dummy = new ListNode(-1);</pre></td></tr><tr><td data-num="6"></td><td><pre>    ListNode p = dummy;</pre></td></tr><tr><td data-num="7"></td><td><pre>    // 优先级队列，最小堆</pre></td></tr><tr><td data-num="8"></td><td><pre>    PriorityQueue&lt;ListNode&gt; pq = new PriorityQueue&lt;&gt;(</pre></td></tr><tr><td data-num="9"></td><td><pre>      lists.length, (a, b)-&gt;(a.val - b.val));</pre></td></tr><tr><td data-num="10"></td><td><pre>    // 将 k 个链表的头结点加入最小堆</pre></td></tr><tr><td data-num="11"></td><td><pre>    for (ListNode head : lists) {</pre></td></tr><tr><td data-num="12"></td><td><pre>      if (head != null)</pre></td></tr><tr><td data-num="13"></td><td><pre>        pq.add(head);</pre></td></tr><tr><td data-num="14"></td><td><pre>    }</pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>    while (!pq.isEmpty()) {</pre></td></tr><tr><td data-num="17"></td><td><pre>      // 获取最小节点，接到结果链表中</pre></td></tr><tr><td data-num="18"></td><td><pre>      ListNode node = pq.poll();</pre></td></tr><tr><td data-num="19"></td><td><pre>      p.next = node;</pre></td></tr><tr><td data-num="20"></td><td><pre>      if (node.next != null) {</pre></td></tr><tr><td data-num="21"></td><td><pre>        pq.add(node.next);</pre></td></tr><tr><td data-num="22"></td><td><pre>      }</pre></td></tr><tr><td data-num="23"></td><td><pre>      // p 指针不断前进</pre></td></tr><tr><td data-num="24"></td><td><pre>      p = p.next;</pre></td></tr><tr><td data-num="25"></td><td><pre>    }</pre></td></tr><tr><td data-num="26"></td><td><pre>    return dummy.next;</pre></td></tr><tr><td data-num="27"></td><td><pre>  }</pre></td></tr><tr><td data-num="28"></td><td><pre>}</pre></td></tr></table><div class="operation"><span class="breakline-btn"><i class="ic i-align-left"></i></span><span class="copy-btn"><i class="ic i-clipboard"></i></span><span class="fullscreen-btn"><i class="ic i-expand"></i></span></div></div></figure><p>总结：优先级队列</p>',2),n=[p];function i(s,l){return d(),r("div",null,n)}const c=t(a,[["render",i],["__file","2cf49dc6.html.vue"]]);export{c as default};
