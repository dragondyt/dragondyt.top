import{_ as t,o as d,c as r,e}from"./app-5de3c553.js";const a={},p=e('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>  今天做了一个自动打卡工具，准备搭建邮件服务，反馈打卡结果。使用的邮箱是yandex mail。出现Got bad greeting from SMTP host: <a href="http://smtp.yandex.com" target="_blank" rel="noopener noreferrer">smtp.yandex.com</a>, port: 465, response: [EOF]，记录一下。</p><h3 id="邮箱准备" tabindex="-1"><a class="header-anchor" href="#邮箱准备" aria-hidden="true">#</a> 邮箱准备</h3><p>  使用邮箱没有要求，支持smtp就行</p><h4 id="注册邮箱" tabindex="-1"><a class="header-anchor" href="#注册邮箱" aria-hidden="true">#</a> 注册邮箱</h4><p><a href="https://mail.yandex.com/" target="_blank" rel="noopener noreferrer">yandex mail注册地址</a></p><h4 id="登录邮箱" tabindex="-1"><a class="header-anchor" href="#登录邮箱" aria-hidden="true">#</a> 登录邮箱</h4><p>  登录邮箱后可能会提示开启smtp。</p><p>这里是官方提供打开smtp的文档，还记录了端口号。<br><img src="https://img-blog.csdnimg.cn/20200729200238708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTM2OTM3,size_16,color_FFFFFF,t_70" alt="官方文档表示端口是465"></p><h4 id="启用smtp" tabindex="-1"><a class="header-anchor" href="#启用smtp" aria-hidden="true">#</a> 启用smtp</h4><p>  邮箱首页右上角的齿轮&gt;security&gt; Email clients&gt;<br><img src="https://img-blog.csdnimg.cn/20200729200832524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTM2OTM3,size_16,color_FFFFFF,t_70" alt="smtp启用页面"><br> 这里我使用outlook测试了连接，使用的端口是465，附连接成功图。</p><p><img src="https://img-blog.csdnimg.cn/20200729201400266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTM2OTM3,size_16,color_FFFFFF,t_70" alt="连接成功图"></p><h3 id="邮件协议" tabindex="-1"><a class="header-anchor" href="#邮件协议" aria-hidden="true">#</a> 邮件协议</h3><h4 id="smtp-协议" tabindex="-1"><a class="header-anchor" href="#smtp-协议" aria-hidden="true">#</a> SMTP 协议</h4><p>SMTP是一个相对简单的基于文本的协议。在其之上指定了一条消息的一个或多个接收者（在大多数情况下被确认是存在的），然后消息文本会被传输。可以很简单地通过telnet程序来测试一个SMTP服务器。提供了SSL加密的SMTP协议被称为SMTPS，SMTP使用TCP端口<code>25</code>，SMTPS使用TCP端口<code>465</code></p><h4 id="pop3-协议" tabindex="-1"><a class="header-anchor" href="#pop3-协议" aria-hidden="true">#</a> POP3 协议</h4><p>POP3，全名为“Post Office Protocol - Version 3”，即“邮局协议版本3”。是TCP/IP协议族中的一员，由RFC1939 定义。本协议主要用于支持使用客户端远程管理在服务器上的电子邮件。提供了SSL加密的POP3协议被称为POP3S，POP3 默认端口<code>110</code>，POP3S默认端口<code>995</code>。</p><h4 id="imap-协议" tabindex="-1"><a class="header-anchor" href="#imap-协议" aria-hidden="true">#</a> IMAP 协议</h4><p>IMAP（Internet Mail Access Protocol）以前称作交互邮件访问协议（Interactive Mail Access Protocol），是一个应用层协议。IMAP是斯坦福大学在1986年开发的一种邮件获取协议。它的主要作用是邮件客户端可以通过这种协议从邮件服务器上获取邮件的信息，下载邮件等。当前的权威定义是RFC3501。IMAP协议运行在TCP/IP协议之上，使用的端口是<code>143</code>。它与POP3协议的主要区别是用户可以不用把所有的邮件全部下载，可以通过客户端直接对服务器上的邮件进行操作，提供了SSL加密的IMAP协议被称为IMAP S，POP3 默认端口<code>143</code>，POP3S默认端口<code>993</code>。</p><h3 id="搭建步骤及简单使用" tabindex="-1"><a class="header-anchor" href="#搭建步骤及简单使用" aria-hidden="true">#</a> 搭建步骤及简单使用</h3><h4 id="mail依赖" tabindex="-1"><a class="header-anchor" href="#mail依赖" aria-hidden="true">#</a> mail依赖</h4><p>build.gradl文件</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><div class="code-container"><table><tr><td data-num="1"></td><td><pre>    compile group: &#39;org.springframework.boot&#39;, name: &#39;spring-boot-starter-mail&#39;, version: &#39;2.3.2.RELEASE&#39;</pre></td></tr></table><div class="operation"><span class="breakline-btn"><i class="ic i-align-left"></i></span><span class="copy-btn"><i class="ic i-clipboard"></i></span><span class="fullscreen-btn"><i class="ic i-expand"></i></span></div></div></figure><h4 id="yml配置文件" tabindex="-1"><a class="header-anchor" href="#yml配置文件" aria-hidden="true">#</a> yml配置文件</h4><figure class="highlight yaml"><figcaption data-lang="yaml"></figcaption><div class="code-container"><table><tr><td data-num="1"></td><td><pre>server:</pre></td></tr><tr><td data-num="2"></td><td><pre>  port: 80</pre></td></tr><tr><td data-num="3"></td><td><pre>logging:</pre></td></tr><tr><td data-num="4"></td><td><pre>  level:</pre></td></tr><tr><td data-num="5"></td><td><pre>    web: debug</pre></td></tr><tr><td data-num="6"></td><td><pre>spring:</pre></td></tr><tr><td data-num="7"></td><td><pre>  mail:</pre></td></tr><tr><td data-num="8"></td><td><pre>    default-encoding: UTF-8</pre></td></tr><tr><td data-num="9"></td><td><pre>    host: smtp.yandex.com</pre></td></tr><tr><td data-num="10"></td><td><pre>    username: xxx@xxx.xx</pre></td></tr><tr><td data-num="11"></td><td><pre>    password: 123456</pre></td></tr><tr><td data-num="12"></td><td><pre>    port: 25 #smtp协议使用25端口 </pre></td></tr><tr><td data-num="13"></td><td><pre>#    port: 465 #smtps使用465端口，不然报错。</pre></td></tr><tr><td data-num="14"></td><td><pre>    protocol: smtp #指定协议</pre></td></tr><tr><td data-num="15"></td><td><pre>    test-connection: true</pre></td></tr><tr><td data-num="16"></td><td><pre>    properties:</pre></td></tr><tr><td data-num="17"></td><td><pre>      mail:</pre></td></tr><tr><td data-num="18"></td><td><pre>        smtp:</pre></td></tr><tr><td data-num="19"></td><td><pre>          auth: true # 使用</pre></td></tr><tr><td data-num="20"></td><td><pre>          starttls: # 使用 SSL 安全协议，须如下配置</pre></td></tr><tr><td data-num="21"></td><td><pre>            enable: true</pre></td></tr><tr><td data-num="22"></td><td><pre>            required: true</pre></td></tr></table><div class="operation"><span class="breakline-btn"><i class="ic i-align-left"></i></span><span class="copy-btn"><i class="ic i-clipboard"></i></span><span class="fullscreen-btn"><i class="ic i-expand"></i></span></div></div></figure><h4 id="java代码" tabindex="-1"><a class="header-anchor" href="#java代码" aria-hidden="true">#</a> java代码</h4><h5 id="mailservice-接口文件" tabindex="-1"><a class="header-anchor" href="#mailservice-接口文件" aria-hidden="true">#</a> MailService 接口文件</h5><figure class="highlight java"><figcaption data-lang="java"></figcaption><div class="code-container"><table><tr><td data-num="1"></td><td><pre>public interface MailService {</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>    /**</pre></td></tr><tr><td data-num="4"></td><td><pre>     * 发送纯文本邮件</pre></td></tr><tr><td data-num="5"></td><td><pre>     * @param toAddr 收件人</pre></td></tr><tr><td data-num="6"></td><td><pre>     * @param title 标题</pre></td></tr><tr><td data-num="7"></td><td><pre>     * @param content 内容</pre></td></tr><tr><td data-num="8"></td><td><pre>     */</pre></td></tr><tr><td data-num="9"></td><td><pre>    void sendTextMail(String toAddr, String title, String content);</pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    /**</pre></td></tr><tr><td data-num="12"></td><td><pre>     * 发送 html 邮件</pre></td></tr><tr><td data-num="13"></td><td><pre>     * @param toAddr 收件人</pre></td></tr><tr><td data-num="14"></td><td><pre>     * @param title 标题</pre></td></tr><tr><td data-num="15"></td><td><pre>     * @param content 内容（HTML）</pre></td></tr><tr><td data-num="16"></td><td><pre>     */</pre></td></tr><tr><td data-num="17"></td><td><pre>    void sendHtmlMail(String toAddr, String title, String content);</pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    /**</pre></td></tr><tr><td data-num="20"></td><td><pre>     *  发送待附件的邮件</pre></td></tr><tr><td data-num="21"></td><td><pre>     * @param toAddr 收件人</pre></td></tr><tr><td data-num="22"></td><td><pre>     * @param title 标题</pre></td></tr><tr><td data-num="23"></td><td><pre>     * @param content 内容</pre></td></tr><tr><td data-num="24"></td><td><pre>     * @param filePath 附件地址</pre></td></tr><tr><td data-num="25"></td><td><pre>     */</pre></td></tr><tr><td data-num="26"></td><td><pre>    void sendAttachmentsMail(String toAddr, String title, String content, String filePath);</pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>    /**</pre></td></tr><tr><td data-num="29"></td><td><pre>     *  发送文本中有静态资源（图片）的邮件</pre></td></tr><tr><td data-num="30"></td><td><pre>     * @param toAddr 收件人</pre></td></tr><tr><td data-num="31"></td><td><pre>     * @param title 标题</pre></td></tr><tr><td data-num="32"></td><td><pre>     * @param content 内容</pre></td></tr><tr><td data-num="33"></td><td><pre>     * @param rscPath 资源路径</pre></td></tr><tr><td data-num="34"></td><td><pre>     * @param rscId 资源id (可能有多个图片)</pre></td></tr><tr><td data-num="35"></td><td><pre>     */</pre></td></tr><tr><td data-num="36"></td><td><pre>    void sendInlineResourceMail(String toAddr, String title, String content, String rscPath, String rscId);</pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>}</pre></td></tr></table><div class="operation"><span class="breakline-btn"><i class="ic i-align-left"></i></span><span class="copy-btn"><i class="ic i-clipboard"></i></span><span class="fullscreen-btn"><i class="ic i-expand"></i></span></div></div></figure><h5 id="mailserviceimpl文件" tabindex="-1"><a class="header-anchor" href="#mailserviceimpl文件" aria-hidden="true">#</a> MailServiceImpl文件</h5><figure class="highlight java"><figcaption data-lang="java"></figcaption><div class="code-container"><table><tr><td data-num="1"></td><td><pre>@Component</pre></td></tr><tr><td data-num="2"></td><td><pre>public class MailServiceImpl implements MailService {</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>    private final Logger logger = LoggerFactory.getLogger(this.getClass());</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    private final JavaMailSender mailSender;</pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    /**</pre></td></tr><tr><td data-num="9"></td><td><pre>     * 注入常量</pre></td></tr><tr><td data-num="10"></td><td><pre>     */</pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    @Value(&quot;${spring.mail.username}&quot;)</pre></td></tr><tr><td data-num="13"></td><td><pre>    private String from;</pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    public MailServiceImpl(JavaMailSender mailSender) {</pre></td></tr><tr><td data-num="16"></td><td><pre>        this.mailSender = mailSender;</pre></td></tr><tr><td data-num="17"></td><td><pre>    }</pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    /**</pre></td></tr><tr><td data-num="20"></td><td><pre>     * 发送文本邮件</pre></td></tr><tr><td data-num="21"></td><td><pre>     *</pre></td></tr><tr><td data-num="22"></td><td><pre>     * @param toAddr  收件人</pre></td></tr><tr><td data-num="23"></td><td><pre>     * @param title   标题</pre></td></tr><tr><td data-num="24"></td><td><pre>     * @param content 内容</pre></td></tr><tr><td data-num="25"></td><td><pre>     */</pre></td></tr><tr><td data-num="26"></td><td><pre>    @Override</pre></td></tr><tr><td data-num="27"></td><td><pre>    public void sendTextMail(String toAddr, String title, String content) {</pre></td></tr><tr><td data-num="28"></td><td><pre>        // 纯文本邮件对象</pre></td></tr><tr><td data-num="29"></td><td><pre>        SimpleMailMessage message = new SimpleMailMessage();</pre></td></tr><tr><td data-num="30"></td><td><pre>        message.setFrom(from);</pre></td></tr><tr><td data-num="31"></td><td><pre>        message.setTo(toAddr);</pre></td></tr><tr><td data-num="32"></td><td><pre>        message.setSubject(title);</pre></td></tr><tr><td data-num="33"></td><td><pre>        message.setText(content);</pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>        try {</pre></td></tr><tr><td data-num="36"></td><td><pre>            mailSender.send(message);</pre></td></tr><tr><td data-num="37"></td><td><pre>            if (logger.isInfoEnabled()) {</pre></td></tr><tr><td data-num="38"></td><td><pre>                logger.info(&quot;Text邮件已经发送。&quot;);</pre></td></tr><tr><td data-num="39"></td><td><pre>            }</pre></td></tr><tr><td data-num="40"></td><td><pre>        } catch (Exception e) {</pre></td></tr><tr><td data-num="41"></td><td><pre>            logger.error(&quot;发送Text邮件时发生异常！&quot;, e);</pre></td></tr><tr><td data-num="42"></td><td><pre>        }</pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>    }</pre></td></tr><tr><td data-num="45"></td><td><pre>    </pre></td></tr><tr><td data-num="46"></td><td><pre>    /**</pre></td></tr><tr><td data-num="47"></td><td><pre>     * 发送 html 邮件</pre></td></tr><tr><td data-num="48"></td><td><pre>     *</pre></td></tr><tr><td data-num="49"></td><td><pre>     * @param toAddr  收件人</pre></td></tr><tr><td data-num="50"></td><td><pre>     * @param title   标题</pre></td></tr><tr><td data-num="51"></td><td><pre>     * @param content 内容（HTML）</pre></td></tr><tr><td data-num="52"></td><td><pre>     */</pre></td></tr><tr><td data-num="53"></td><td><pre>    @Override</pre></td></tr><tr><td data-num="54"></td><td><pre>    public void sendHtmlMail(String toAddr, String title, String content) {</pre></td></tr><tr><td data-num="55"></td><td><pre>        // html 邮件对象</pre></td></tr><tr><td data-num="56"></td><td><pre>        MimeMessage message = mailSender.createMimeMessage();</pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre>        try {</pre></td></tr><tr><td data-num="59"></td><td><pre>            //true表示需要创建一个multipart message</pre></td></tr><tr><td data-num="60"></td><td><pre>            MimeMessageHelper helper = new MimeMessageHelper(message, true);</pre></td></tr><tr><td data-num="61"></td><td><pre>            helper.setFrom(from);</pre></td></tr><tr><td data-num="62"></td><td><pre>            helper.setTo(toAddr);</pre></td></tr><tr><td data-num="63"></td><td><pre>            helper.setSubject(title);</pre></td></tr><tr><td data-num="64"></td><td><pre>            helper.setText(content, true);</pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre>            mailSender.send(message);</pre></td></tr><tr><td data-num="67"></td><td><pre>            if (logger.isInfoEnabled()) {</pre></td></tr><tr><td data-num="68"></td><td><pre>                logger.info(&quot;html邮件发送成功&quot;);</pre></td></tr><tr><td data-num="69"></td><td><pre>            }</pre></td></tr><tr><td data-num="70"></td><td><pre>        } catch (MessagingException e) {</pre></td></tr><tr><td data-num="71"></td><td><pre>            logger.error(&quot;发送html邮件时发生异常！&quot;, e);</pre></td></tr><tr><td data-num="72"></td><td><pre>        }</pre></td></tr><tr><td data-num="73"></td><td><pre>    }</pre></td></tr><tr><td data-num="74"></td><td><pre></pre></td></tr><tr><td data-num="75"></td><td><pre></pre></td></tr><tr><td data-num="76"></td><td><pre>    /**</pre></td></tr><tr><td data-num="77"></td><td><pre>     * 发送待附件的邮件</pre></td></tr><tr><td data-num="78"></td><td><pre>     *</pre></td></tr><tr><td data-num="79"></td><td><pre>     * @param toAddr   收件人</pre></td></tr><tr><td data-num="80"></td><td><pre>     * @param title    标题</pre></td></tr><tr><td data-num="81"></td><td><pre>     * @param content  内容</pre></td></tr><tr><td data-num="82"></td><td><pre>     * @param filePath 附件地址</pre></td></tr><tr><td data-num="83"></td><td><pre>     */</pre></td></tr><tr><td data-num="84"></td><td><pre>    @Override</pre></td></tr><tr><td data-num="85"></td><td><pre>    public void sendAttachmentsMail(String toAddr, String title, String content, String filePath) {</pre></td></tr><tr><td data-num="86"></td><td><pre>        MimeMessage message = mailSender.createMimeMessage();</pre></td></tr><tr><td data-num="87"></td><td><pre></pre></td></tr><tr><td data-num="88"></td><td><pre>        try {</pre></td></tr><tr><td data-num="89"></td><td><pre>            MimeMessageHelper helper = new MimeMessageHelper(message, true);</pre></td></tr><tr><td data-num="90"></td><td><pre>            helper.setFrom(from);</pre></td></tr><tr><td data-num="91"></td><td><pre>            helper.setTo(toAddr);</pre></td></tr><tr><td data-num="92"></td><td><pre>            helper.setSubject(title);</pre></td></tr><tr><td data-num="93"></td><td><pre>            helper.setText(content, true);</pre></td></tr><tr><td data-num="94"></td><td><pre></pre></td></tr><tr><td data-num="95"></td><td><pre>            FileSystemResource file = new FileSystemResource(new File(filePath));</pre></td></tr><tr><td data-num="96"></td><td><pre>            String fileName = filePath.substring(filePath.lastIndexOf(File.separator));</pre></td></tr><tr><td data-num="97"></td><td><pre>            helper.addAttachment(fileName, file);</pre></td></tr><tr><td data-num="98"></td><td><pre>            mailSender.send(message);</pre></td></tr><tr><td data-num="99"></td><td><pre>            if (logger.isInfoEnabled()) {</pre></td></tr><tr><td data-num="100"></td><td><pre>                logger.info(&quot;带附件的邮件已经发送。&quot;);</pre></td></tr><tr><td data-num="101"></td><td><pre>            }</pre></td></tr><tr><td data-num="102"></td><td><pre>        } catch (MessagingException e) {</pre></td></tr><tr><td data-num="103"></td><td><pre>            logger.error(&quot;发送带附件的邮件时发生异常！&quot;, e);</pre></td></tr><tr><td data-num="104"></td><td><pre>        }</pre></td></tr><tr><td data-num="105"></td><td><pre>    }</pre></td></tr><tr><td data-num="106"></td><td><pre></pre></td></tr><tr><td data-num="107"></td><td><pre></pre></td></tr><tr><td data-num="108"></td><td><pre>    /**</pre></td></tr><tr><td data-num="109"></td><td><pre>     * 发送文本中有静态资源（图片）的邮件</pre></td></tr><tr><td data-num="110"></td><td><pre>     *</pre></td></tr><tr><td data-num="111"></td><td><pre>     * @param toAddr  收件人</pre></td></tr><tr><td data-num="112"></td><td><pre>     * @param title   标题</pre></td></tr><tr><td data-num="113"></td><td><pre>     * @param content 内容</pre></td></tr><tr><td data-num="114"></td><td><pre>     * @param rscPath 资源路径</pre></td></tr><tr><td data-num="115"></td><td><pre>     * @param rscId   资源id (可能有多个图片)</pre></td></tr><tr><td data-num="116"></td><td><pre>     */</pre></td></tr><tr><td data-num="117"></td><td><pre>    @Override</pre></td></tr><tr><td data-num="118"></td><td><pre>    public void sendInlineResourceMail(String toAddr, String title, String content, String rscPath, String rscId) {</pre></td></tr><tr><td data-num="119"></td><td><pre>        MimeMessage message = mailSender.createMimeMessage();</pre></td></tr><tr><td data-num="120"></td><td><pre></pre></td></tr><tr><td data-num="121"></td><td><pre>        try {</pre></td></tr><tr><td data-num="122"></td><td><pre>            MimeMessageHelper helper = new MimeMessageHelper(message, true);</pre></td></tr><tr><td data-num="123"></td><td><pre>            helper.setFrom(from);</pre></td></tr><tr><td data-num="124"></td><td><pre>            helper.setTo(toAddr);</pre></td></tr><tr><td data-num="125"></td><td><pre>            helper.setSubject(title);</pre></td></tr><tr><td data-num="126"></td><td><pre>            helper.setText(content, true);</pre></td></tr><tr><td data-num="127"></td><td><pre></pre></td></tr><tr><td data-num="128"></td><td><pre>            FileSystemResource res = new FileSystemResource(new File(rscPath));</pre></td></tr><tr><td data-num="129"></td><td><pre>            helper.addInline(rscId, res);</pre></td></tr><tr><td data-num="130"></td><td><pre></pre></td></tr><tr><td data-num="131"></td><td><pre>            mailSender.send(message);</pre></td></tr><tr><td data-num="132"></td><td><pre>            if (logger.isInfoEnabled()) {</pre></td></tr><tr><td data-num="133"></td><td><pre>                logger.info(&quot;嵌入静态资源的邮件已经发送。&quot;);</pre></td></tr><tr><td data-num="134"></td><td><pre>            }</pre></td></tr><tr><td data-num="135"></td><td><pre>        } catch (MessagingException e) {</pre></td></tr><tr><td data-num="136"></td><td><pre>            logger.error(&quot;发送嵌入静态资源的邮件时发生异常！&quot;, e);</pre></td></tr><tr><td data-num="137"></td><td><pre>        }</pre></td></tr><tr><td data-num="138"></td><td><pre>    }</pre></td></tr><tr><td data-num="139"></td><td><pre>}</pre></td></tr></table><div class="operation"><span class="breakline-btn"><i class="ic i-align-left"></i></span><span class="copy-btn"><i class="ic i-clipboard"></i></span><span class="fullscreen-btn"><i class="ic i-expand"></i></span></div></div></figure><h5 id="测试类" tabindex="-1"><a class="header-anchor" href="#测试类" aria-hidden="true">#</a> 测试类</h5><figure class="highlight java"><figcaption data-lang="java"></figcaption><div class="code-container"><table><tr><td data-num="1"></td><td><pre>@SpringBootTest</pre></td></tr><tr><td data-num="2"></td><td><pre>class ClockInApplicationTests {</pre></td></tr><tr><td data-num="3"></td><td><pre>    @Autowired</pre></td></tr><tr><td data-num="4"></td><td><pre>    MailService mailService;</pre></td></tr><tr><td data-num="5"></td><td><pre>    @Test</pre></td></tr><tr><td data-num="6"></td><td><pre>    void sendTextMail(){</pre></td></tr><tr><td data-num="7"></td><td><pre>        mailService.sendTextMail(&quot;vlnrjp92486@chacuo.net&quot;,&quot;单元测试&quot;,&quot;测试邮件发送&quot;);</pre></td></tr><tr><td data-num="8"></td><td><pre>    }</pre></td></tr><tr><td data-num="9"></td><td><pre>}</pre></td></tr></table><div class="operation"><span class="breakline-btn"><i class="ic i-align-left"></i></span><span class="copy-btn"><i class="ic i-clipboard"></i></span><span class="fullscreen-btn"><i class="ic i-expand"></i></span></div></div></figure><h4 id="运行结果" tabindex="-1"><a class="header-anchor" href="#运行结果" aria-hidden="true">#</a> 运行结果</h4><p>如标题所述，出现了异常<br><img src="https://img-blog.csdnimg.cn/20200729210357480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTM2OTM3,size_16,color_FFFFFF,t_70" alt="异常图"><br> 使用协议对应端口后发送成功，附图。<br><img src="https://img-blog.csdnimg.cn/20200729211122279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTM2OTM3,size_16,color_FFFFFF,t_70" alt="单元测试通过"></p><h3 id="结语" tabindex="-1"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h3><p>  通过这个实践，我觉要写代码前还是要做很多准备，或者说我了解的东西不过全面。出错后百度异常信息怎么都找不到，想着哪里出错了，之前使用outlook连接测试通过，应该就是代码问题。后来看到很多人使用25端口发送，然后去百度端口才发现协议与端口不一致。所以我觉得写代码前的准备不充分或者知识储备不足，这个重要信息都不了解。</p>',36),n=[p];function i(s,m){return d(),r("div",null,n)}const u=t(a,[["render",i],["__file","c82dcf86.html.vue"]]);export{u as default};
